pragma ComponentBehavior: Bound

import QtQuick
import QtQuick.Layouts
import QtQuick.Controls
import Quickshell
import Quickshell.Services.Pipewire
import Quickshell.Hyprland
import Quickshell.Widgets

import qs.services

Scope {
    id: root

    Connections {
        target: Audio

        function onVolumeChanged() {
            root.shouldShowOsd = true;
            hideTimer.restart();
        }
    }

    property bool shouldShowOsd: false

    Timer {
        id: hideTimer
        running: false
        interval: 1000
        onTriggered: root.shouldShowOsd = false
    }

    LazyLoader {
        active: root.shouldShowOsd

		PanelWindow {
			// Since the panel's screen is unset, it will be picked by the compositor
			// when the window is created. Most compositors pick the current active monitor.

			anchors.bottom: true
			margins.bottom: screen.height / 5
			exclusiveZone: 0

			implicitWidth: 400
			implicitHeight: 50
			color: "transparent"

			// An empty click mask prevents the window from blocking mouse events.
			mask: Region {}

			Rectangle {
				anchors.fill: parent
				radius: height / 2
				color: "#80000000"

				RowLayout {
					anchors {
						fill: parent
						leftMargin: 10
						rightMargin: 15
					}
                    spacing: 20

                    IconImage {
                        // Layout.alignment: Qt.AlignCenter
                        implicitSize: 30
                        source: Audio.volumeIcon()
                    }

                    ProgressBar {
                        from: 0
                        to: 1.0
                        value: Audio.volume

                        background: Item {
                            implicitWidth: 120
                            implicitHeight: 4
                        }

                        contentItem: Item {
                            id: contentItem
                            anchors.fill: parent

                            Loader {
                                active: true
                                sourceComponent: Rectangle {
                                    anchors.left: parent.left
                                    width: contentItem.width * root.visualPosition
                                    height: contentItem.height
                                    radius: height / 2
                                    color: "#ffffff"
                                }
                            }
                        }

                        Rectangle {
                            anchors.right: parent.right
                            width: (1 - root.visualPosition) * parent.width - 2
                            height: parent.height
                            radius: height / 2
                            color: "#123947"
                        }

                        Rectangle {
                            anchors.right: parent.right
                            width: 2
                            height: 2
                            radius: height / 2
                            color: "#ffffff"
                        }
                    }

					// Rectangle {
					// 	// Stretches to fill all left-over space
					// 	Layout.fillWidth: true
					//
					// 	implicitHeight: 10
					// 	radius: 20
					// 	color: "#50ffffff"
					//
					// 	Rectangle {
					// 		anchors {
					// 			left: parent.left
					// 			top: parent.top
					// 			bottom: parent.bottom
					// 		}
					//
					//                        implicitWidth: parent.width * Math.min(1,(Pipewire.defaultAudioSink?.audio.volume ?? 0))
					// 		radius: parent.radius
					// 	}
					// }
				}
			}
		}

        // PanelWindow {
        //     anchors.right: true
        //
        //     exclusiveZone: 0
        //
        //     implicitWidth: 120
        //     implicitHeight: 400 
        //     color: "transparent"
        //
        //     mask: Region {}
        //
        //     Rectangle {
        //         anchors.fill: parent
        //         anchors.rightMargin: 20
        //         radius: width / 2 
        //         color: "#80000000"
        //
        //         ColumnLayout {
        //             anchors {
        //                 fill: parent
        //                 topMargin: 30
        //                 bottomMargin: 30
        //             }
        //             spacing: 20
        //
        //             // Text {
        //             //     Layout.alignment: Qt.AlignCenter
        //             //     text: Audio.volumeText
        //             //     font.pointSize: 28
        //             //     color: "white"
        //             // }
        //
        //             IconImage {
        //                 Layout.alignment: Qt.AlignCenter
        //                 implicitSize: 30
        //                 source: Audio.volumeIcon()
        //             }
        //
        //             ProgressBar {
        //
        //             }
        //
        //             // Rectangle {
        //             //     id: bar
        //             //     Layout.alignment: Qt.AlignCenter
        //             //
        //             //     Layout.fillHeight: true
        //             //
        //             //
        //             //     implicitWidth: parent.width / 2
        //             //     radius: parent.width / 6
        //             //     color: "#50ffffff"
        //             //
        //             //     Rectangle {
        //             //         anchors {
        //             //             left: parent.left
        //             //             right: parent.right
        //             //             bottom: parent.bottom
        //             //         }
        //             //
        //             //         implicitHeight: parent.height * Math.min(1,(Pipewire.defaultAudioSink?.audio.volume ?? 0))
        //             //         // onHeightChanged: console.log(`${parent.height * (Pipewire.defaultAudioSink?.audio.volume ?? 0)}`)
        //             //
        //             //         radius: parent.radius
        //             //
        //             //         color: "white" 
        //             //     }
        //             // }
        //         }
        //     }
        // }
    }
    GlobalShortcut {
        name: "toggleOsd"
        description: "Shows Osd on press"
        onPressed: {
            root.shouldShowOsd = true
        }
    }

}
